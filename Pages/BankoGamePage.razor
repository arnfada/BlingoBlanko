@page "/BankoGame"
@page "/BankoGame/{PassCode}/{NumberOfCards:int}"
@using BlinkoBlanko.Banko
@inject IJSRuntime JsRuntime

<PageTitle>BingoGame</PageTitle>

<div class="columns">
    <div class="column is-half">
        <table class="table numberTable is-bordered is-fullwidth has-text-centered disable-text-selection">
            <thead>
            </thead>
            <tbody>
                @for (int i = 0; i < 10; i++)
                {
                    <tr>
                        @for (int j = 0; j < 9; j++)
                        {
                            <td style="">
                                <span class="text-center tableNumber @(Game.Numbers[i+j*10].IsDrawn ? "numberIsDrawn" : "numberIsNotDrawn")">
                                    @(Game.Numbers[i+j*10].Number)
                                </span>
                            </td>
                        }
                    </tr>
                }
            </tbody>
        </table>
    </div>
    <div class="column is-half drawnNumbersArea is-flex has-text-centered">
        <div class="lastDrawnNumber isNumberCircle disable-text-selection">
            <span class="">@(Game.DrawnNumbers.Count > 0 ? Game.DrawnNumbers.LastOrDefault().ToString() : string.Empty)</span>
        </div>
        <span>Last 5 numbers:</span>
        <div class="lastFiveDrawnNumbers disable-text-selection">
            @if (Game.DrawnNumbers.Count > 0)
            {
                @for (int i = 2; i <= 6; i++)
                {
                    @if (Game.DrawnNumbers.Count >= i)
                    {
                        <div class="lastFiveDrawnNumber isNumberCircle">
                            <span>@Game.DrawnNumbers[Game.DrawnNumbers.Count - i]</span>
                        </div>
                    }
                }
            }
        </div>

        <div class="columns">
            <div class="column">
                <button class="button is-primary" @onclick="DrawNumber">Draw Number</button>
            </div>
            <div class="column">
                <button class="button is-secondary" @onclick="ResetGame">Reset Game</button>
            </div>
        </div>
    </div>


</div>
<div class="columns">
    <div class="column is-half">
        <div class="field has-addons">
            <div class="control is-expanded">
                <input class="input" type="number" placeholder="Card number" @bind="checkBingoCardNumber">
            </div>
            <div class="control">
                <button class="button is-info" @onclick="CheckCard">Check card</button>
            </div>
            <div class="control">
                <button class="button is-secondary" @onclick="ClearCard">Clear</button>
            </div>
        </div>
        <BankoCard Plate=@checkBingoPlate />
    </div>
    <div class="column is-half">
    </div>
</div>

@code {
    [Parameter]
    public int? NumberOfCards { get; set; } = 50;

    [Parameter]
    public string? PassCode { get; set; } = "1234";

    private BankoGame Game = new BankoGame();

    private int? checkBingoCardNumber = null;
    private BankoPlate? checkBingoPlate = null;


    protected override void OnInitialized()
    {
        Game.Initialize(PassCode, NumberOfCards);
    }

    private void DrawNumber()
    {
        Game.Draw();

        UpdateCheckCard();
    }
    private async void ResetGame()
    {
        bool confirmed = await JsRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to reset the game?");
        if (confirmed)
        {
            Game.Reset();
            StateHasChanged();
        }
    }
    private void CheckCard()
    {
        if (checkBingoCardNumber.HasValue)
        {
            checkBingoPlate = Game.GetPlateByNumber(checkBingoCardNumber.Value);
        }
        else
        {
            checkBingoPlate = null;
        }
    }

    private void UpdateCheckCard()
    {
        if (checkBingoPlate != null)
        {
            checkBingoPlate.MarkDrawnNumbers(Game.DrawnNumbers);
        }
    }
    private void ClearCard()
    {
        checkBingoPlate = null;
        checkBingoCardNumber = null;
    }

}
