@page "/BankoGame"
@page "/BankoGame/{PassCode}/{NumberOfCards:int}"
@using BlinkoBlanko.Banko
@inject IJSRuntime JsRuntime
@inject Blazored.LocalStorage.ILocalStorageService localStorage

<PageTitle>BingoGame</PageTitle>

<div class="columns">
    <div class="column is-half">
        <table class="table numberTable is-bordered is-fullwidth has-text-centered disable-text-selection">
            <thead>
            </thead>
            <tbody>
                @for (int i = 0; i < 10; i++)
                {
                    <tr>
                        @for (int j = 0; j < 9; j++)
                        {
                            <td style="">
                                <span class="text-center tableNumber @(Game.Numbers[i+j*10].IsDrawn ? "numberIsDrawn" : "numberIsNotDrawn")">
                                    @(Game.Numbers[i+j*10].Number)
                                </span>
                            </td>
                        }
                    </tr>
                }
            </tbody>
        </table>
    </div>
    <div class="column is-half drawnNumbersArea is-flex has-text-centered">
        <div class="lastDrawnNumber isNumberCircle disable-text-selection">
            <span class="">@(Game.DrawnNumbers.Count > 0 ? Game.DrawnNumbers.LastOrDefault().ToString() : string.Empty)</span>
        </div>
        <span>Last 5 numbers:</span>
        <div class="lastFiveDrawnNumbers disable-text-selection">
            @if (Game.DrawnNumbers.Count > 0)
            {
                @for (int i = 2; i <= 6; i++)
                {
                    @if (Game.DrawnNumbers.Count >= i)
                    {
                        <div class="lastFiveDrawnNumber isNumberCircle">
                            <span>@Game.DrawnNumbers[Game.DrawnNumbers.Count - i]</span>
                        </div>
                    }
                }
            }
        </div>

        <div class="columns">
            <div class="column">
                <button class="button is-primary" @onclick="DrawNumber" disabled="@disableDrawButton">Draw Number</button>
            </div>
            <div class="column">
                <span class="tag is-light is-medium">@Game.DrawnNumbers.Count / 90</span>
            </div>
            <div class="column">
                <button class="button is-secondary" @onclick="ResetGame">Reset Game</button>
            </div>
        </div>
    </div>


</div>
<div class="columns">
    <div class="column is-half">
        <div class="field has-addons">
            <div class="control is-expanded">
                <input class="input" type="number" placeholder="Card number" @bind="checkBingoCardNumber">
            </div>
            <div class="control">
                <button class="button is-info" @onclick="CheckCard">Check card</button>
            </div>
            <div class="control">
                <button class="button is-secondary" @onclick="ClearCard">Clear</button>
            </div>
        </div>
        <BankoCard Plate=@checkBingoPlate />
    </div>
    <div class="column is-half has-text-centered">
        <label class="checkbox">
            <input type="checkbox" @bind-value="@showWinners"> Show winning cards
        </label>
        @if (showWinners)
        {
            @if (Game.WinnersBanko.Count > 0)
            {
                <div>
                    <h1>Banko (Full-Card):</h1>
                </div>
                <div>
                    @foreach (var fullPlate in Game.WinnersBanko)
                    {
                        <span>@fullPlate.PlateNumber, </span>
                    }
                </div>
            }
            @if (Game.WinnersTwoRows.Count > 0)
            {
                <div>
                    <h3>Two rows</h3>
                </div>
                <div>
                    @foreach (var twoRowPlate in Game.WinnersTwoRows)
                    {
                        <span>@twoRowPlate.PlateNumber, </span>
                    }
                </div>
            }

            @if (Game.WinnersOneRows.Count > 0)
            {
                <div>
                    <h3>One row</h3>
                </div>
                <div>
                    @foreach (var oneRowPlate in Game.WinnersOneRows)
                    {
                        <span>@oneRowPlate.PlateNumber, </span>
                    }
                </div>
            }
        }
    </div>
</div>
<div class="columns">
    <!-- SETTINGS-->
    <div class="column is-half">
        <label class="checkbox">
            <input type="checkbox" @bind-value="@showSettings"> Show settings
        </label>
        @if (showSettings)
        {
            <!-- Speed control-->
            <div class="field is-horizontal">
                <div class="field-label">Speed control</div>
                <div class="field-body">
                    <div class="field is-expanded">
                        <div class="field has-addons">
                            <p class="control is-expanded">
                                <input class="input" type="number" placeholder="Draw button is disabled for X seconds" @bind-value="@speedControl">
                            </p>
                            <p class="control">
                                <a class="button is-static">
                                    sec.
                                </a>
                            </p>
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>
</div>

@code {
    [Parameter]
    public int? NumberOfCards { get; set; } = 50;

    [Parameter]
    public string? PassCode { get; set; } = "1234";

    private BankoGame Game = new BankoGame();

    private int? checkBingoCardNumber = null;
    private BankoPlate? checkBingoPlate = null;
    private bool showWinners = false;
    private bool showSettings = false;
    private int? speedControl = null;
    private bool disableDrawButton = false;

    protected override async Task OnInitializedAsync()
    {
        await Game.Initialize(PassCode, NumberOfCards, localStorage);
    }

    private async Task DrawNumber()
    {
        await Game.Draw();

        // Disable draw button if speed control is enabled
        if (speedControl.HasValue && speedControl.Value > 0)
        {
            disableDrawButton = true;
            StateHasChanged();
            await Task.Delay(speedControl.Value * 1000);
            disableDrawButton = false;
            StateHasChanged();
        }
    }

    private async void ResetGame()
    {
        bool confirmed = await JsRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to reset the game?");
        if (confirmed)
        {
            Game.Reset();
            StateHasChanged();
        }
    }
    private void CheckCard()
    {
        if (checkBingoCardNumber.HasValue)
        {
            checkBingoPlate = Game.GetPlateByNumber(checkBingoCardNumber.Value);
        }
        else
        {
            checkBingoPlate = null;
        }
    }

    private void ClearCard()
    {
        checkBingoPlate = null;
        checkBingoCardNumber = null;
    }

        }
